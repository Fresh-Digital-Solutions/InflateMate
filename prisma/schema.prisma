// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  name        String?
  email       String?    @unique
  image       String?
  clerkUserId String?    @unique
  onboarded   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]

  @@index([email])
}

// Multi-tenancy and business models
model Business {
  id              String      @id @default(cuid())
  name            String
  description     String?
  address         String?
  city            String?
  state           String?
  zipCode         String?
  phone           String?
  email           String?
  website         String?
  stripeAccountId String?
  logo            String?
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings        Booking[]
  customers       Customer[]
  settings        Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  inventory       Inventory[]
  payments        Payment[]

  cancellationPolicy String? // Cancellation policy text
  depositRequired    Boolean @default(true)
  depositPercentage  Float   @default(25.0) // Default 25% deposit
  minAdvanceBooking  Int     @default(24) // Minimum hours before booking
  maxAdvanceBooking  Int     @default(90) // Maximum days to book in advance
  bufferTime         Int     @default(60) // Buffer time in minutes between bookings

  @@index([userId])
}

model Inventory {
  id                  String          @id @default(cuid())
  type                InventoryType
  name                String
  description         String?
  dimensions          String
  capacity            Int
  price               Float
  setupTime           Int // Minutes
  teardownTime        Int // Minutes
  images              String[]
  primaryImage        String?
  status              InventoryStatus
  minimumSpace        String
  weightLimit         Int
  ageRange            String
  weatherRestrictions String[]
  quantity            Int             @default(1) // Number of items in inventory
  bookingItems        BookingItem[] // Changed from direct booking relation to BookingItem relation
  business            Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String
  availability        Availability[]
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([businessId])
}

// Track availability and block out dates
model Availability {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean   @default(true)
  reason      String? // Reason for unavailability (e.g., "Maintenance", "Holiday")

  @@index([inventoryId])
  @@index([startTime, endTime])
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  notes        String? // Customer notes/preferences
  status       String    @default("Active")
  type         String    @default("Regular") // Customer type (Regular/VIP)
  bookingCount Int       @default(0)
  totalSpent   Float     @default(0)
  lastBooking  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  businessId String
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings   Booking[]

  @@unique([email, businessId]) // Makes email unique only within a business context
  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model Booking {
  id                  String        @id @default(cuid())
  eventDate           DateTime
  startTime           DateTime
  endTime             DateTime
  status              BookingStatus @default(PENDING)
  totalAmount         Float
  depositAmount       Float?
  depositPaid         Boolean       @default(false)
  eventType           String?
  eventAddress        String
  eventCity           String
  eventState          String
  eventZipCode        String
  participantAge      Int?
  participantCount    Int
  specialInstructions String?
  businessId          String
  business            Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customerId          String
  customer            Customer      @relation(fields: [customerId], references: [id])
  inventoryItems      BookingItem[] // New relation to BookingItem
  payments            Payment[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@index([businessId])
  @@index([customerId])
  @@index([eventDate])
  @@index([startTime, endTime])
}

// New model to handle multiple inventory items per booking
model BookingItem {
  id          String    @id @default(cuid())
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  quantity    Int       @default(1)
  price       Float // Price at time of booking

  @@index([bookingId])
  @@index([inventoryId])
}

model Payment {
  id                 String        @id @default(cuid())
  amount             Decimal       @db.Decimal(10, 2)
  currency           String        @default("USD")
  status             PaymentStatus
  type               PaymentType
  stripePaymentId    String? // Stripe payment intent ID
  stripeClientSecret String? // For client-side confirmation
  refundAmount       Decimal?      @db.Decimal(10, 2)
  refundReason       String?
  metadata           Json? // Additional payment metadata

  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  paidAt    DateTime?
}

enum InventoryStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  RETIRED
}

enum InventoryType {
  BOUNCE_HOUSE
  INFLATABLE
  GAME
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WEATHER_HOLD
}

enum PaymentType {
  DEPOSIT
  FULL_PAYMENT
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
