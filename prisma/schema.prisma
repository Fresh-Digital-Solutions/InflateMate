// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password for email/password auth
  role          UserRole  @default(USER)
  onboarded     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts   Account[]
  sessions   Session[]
  businesses Business[] // For multi-tenancy

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Multi-tenancy and business models
model Business {
  id           String        @id @default(cuid())
  name         String
  description  String?
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  email        String?
  website      String?
  stripeAccountId String?
  logo         String?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bounceHouses BounceHouse[]
  bookings     Booking[]
  customers    Customer[]
  packages     Package[]
  addOns       AddOn[]
  settings     Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Business settings
  businessHours      BusinessHours[]
  serviceArea        ServiceArea?
  cancellationPolicy String? // Cancellation policy text
  depositRequired    Boolean         @default(true)
  depositPercentage  Float           @default(25.0) // Default 25% deposit
  minAdvanceBooking  Int             @default(24) // Minimum hours before booking
  maxAdvanceBooking  Int             @default(90) // Maximum days to book in advance
  bufferTime         Int             @default(60) // Buffer time in minutes between bookings
  Employee           Employee[]
  Payment            Payment[]
  Coupon             Coupon[]

  @@index([userId])
}

model BusinessHours {
  id        String   @id @default(cuid())
  dayOfWeek Int // 0-6 (Sunday-Saturday)
  openTime  DateTime
  closeTime DateTime
  isOpen    Boolean  @default(true)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, dayOfWeek])
  @@index([businessId])
}

model ServiceArea {
  id          String   @id @default(cuid())
  businessId  String   @unique
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  radius      Float // Service radius in miles
  zipCodes    String[] // Array of service area zip codes
  coordinates Json? // GeoJSON for custom service area

  @@index([businessId])
}

model BounceHouse {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  dimensions          String
  capacity            Int
  price               Float
  setupTime           Int
  teardownTime        Int
  images              String[]
  primaryImage        String?
  status              InventoryStatus
  minimumSpace        String
  weightLimit         Int
  ageRange            String
  weatherRestrictions String[]
  features            BounceHouseFeature[]
  bookings            Booking[]
  business            Business             @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId          String
  availability        Availability[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  PackageItem         PackageItem[]

  @@index([businessId])
}

// Features for bounce houses (e.g., "Slide", "Basketball Hoop", etc.)
model BounceHouseFeature {
  id            String      @id @default(cuid())
  name          String
  bounceHouseId String
  bounceHouse   BounceHouse @relation(fields: [bounceHouseId], references: [id], onDelete: Cascade)

  @@unique([bounceHouseId, name])
  @@index([bounceHouseId])
}

// Track availability and block out dates
model Availability {
  id            String      @id @default(cuid())
  bounceHouseId String
  bounceHouse   BounceHouse @relation(fields: [bounceHouseId], references: [id], onDelete: Cascade)
  startTime     DateTime
  endTime       DateTime
  isAvailable   Boolean     @default(true)
  reason        String? // Reason for unavailability (e.g., "Maintenance", "Holiday")

  @@index([bounceHouseId])
  @@index([startTime, endTime])
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  notes        String? // Customer notes/preferences
  bookingCount Int       @default(0)
  totalSpent   Float     @default(0)
  lastBooking  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  businessId String
  business   Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings   Booking[]

  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model Booking {
  id                  String         @id @default(cuid())
  eventDate           DateTime
  startTime           DateTime
  endTime             DateTime
  status              BookingStatus  @default(PENDING)
  totalAmount         Float
  depositAmount       Float?
  depositPaid         Boolean        @default(false)
  eventType           String?
  eventAddress        String
  eventCity           String
  eventState          String
  eventZipCode        String
  participantAge      Int?
  participantCount    Int
  specialInstructions String?
  businessId          String
  business            Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bounceHouseId       String
  bounceHouse         BounceHouse    @relation(fields: [bounceHouseId], references: [id])
  customerId          String
  customer            Customer       @relation(fields: [customerId], references: [id])
  packageId           String?
  package             Package?       @relation(fields: [packageId], references: [id])
  addOns              BookingAddOn[]
  payments            Payment[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([businessId])
  @@index([bounceHouseId])
  @@index([customerId])
  @@index([packageId])
  @@index([eventDate])
  @@index([startTime, endTime])
}

model Package {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  isActive    Boolean @default(true)

  businessId String
  business   Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)
  items      PackageItem[]
  bookings   Booking[]
  addOns     AddOn[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@index([businessId])
}

model PackageItem {
  id            String      @id @default(cuid())
  packageId     String
  package       Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  bounceHouseId String
  bounceHouse   BounceHouse @relation(fields: [bounceHouseId], references: [id], onDelete: Cascade)

  @@unique([packageId, bounceHouseId])
  @@index([packageId])
  @@index([bounceHouseId])
}

model AddOn {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Float
  isActive    Boolean @default(true)

  businessId    String
  business      Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  packages      Package[]
  bookingAddOns BookingAddOn[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([businessId])
}

model BookingAddOn {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  addOnId   String?
  addOn     AddOn?   @relation(fields: [addOnId], references: [id])
  name      String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookingId])
  @@index([addOnId])
}

model Payment {
  id                 String        @id @default(cuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  paidAt             DateTime?
  amount             Decimal       @db.Decimal(10, 2)
  currency           String        @default("USD")
  status             PaymentStatus
  type               PaymentType
  stripePaymentId    String? // Stripe payment intent ID
  stripeClientSecret String? // For client-side confirmation
  booking            Booking       @relation(fields: [bookingId], references: [id])
  bookingId          String
  business           Business      @relation(fields: [businessId], references: [id])
  businessId         String
  refundAmount       Decimal?      @db.Decimal(10, 2)
  refundReason       String?
  metadata           Json? // Additional payment metadata
}

model Coupon {
  id             String       @id @default(cuid())
  code           String       @unique
  description    String?
  discountType   DiscountType
  discountAmount Float // Percentage or fixed amount
  maxUses        Int? // Maximum number of times the coupon can be used
  usedCount      Int          @default(0)
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean      @default(true)
  minimumAmount  Float? // Minimum order amount for the coupon to be valid
  business       Business     @relation(fields: [businessId], references: [id])
  businessId     String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Employee {
  id        String       @id @default(cuid())
  name      String
  email     String
  phone     String?
  role      EmployeeRole @default(STAFF)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@index([email])
}

enum UserRole {
  USER
  ADMIN
}

enum InventoryStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  RETIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WEATHER_HOLD
}

enum EmployeeRole {
  STAFF
  MANAGER
  ADMIN
}

enum PaymentType {
  DEPOSIT
  BALANCE
  FULL_PAYMENT
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}
