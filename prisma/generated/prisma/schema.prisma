generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id          String   @id @default(cuid())
  email       String?  @unique
  name        String?
  image       String?
  onboarded   Boolean  @default(false)
  clerkUserId String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  businesses  Business[]
  memberships Membership[]

  @@index([email])
}

model Business {
  id          String  @id @default(cuid())
  name        String
  description String?

  // Contact info
  address     String?
  city        String?
  state       String?
  zipCode     String?
  phone       String?
  email       String?
  serviceArea String[]

  // Brand assets
  logo String?

  // Booking settings
  minAdvanceBooking Int    @default(24)
  maxAdvanceBooking Int    @default(90)
  minimumPurchase   Float  @default(0)
  timeZone          String @default("America/Chicago")

  // Integrations
  stripeAccountId String?

  socialMedia     Json?
  customDomain    String?
  subdomain       String? @unique
  siteConfig      Json?
  onboardingError String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  inventory    Inventory[]
  customers    Customer[]
  bookings     Booking[]
  payments     Payment[]
  coupons      Coupon[]
  salesFunnels SalesFunnel[]
  waivers      Waiver[]

  // One-to-one Organization link
  organization   Organization?
  organizationId String?       @unique

  @@index([userId])
}

model Organization {
  id         String   @id @default(cuid())
  clerkOrgId String   @unique // Clerk's org ID
  name       String? // Optional mirror of org name
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  businessId String   @unique
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  memberships  Membership[]
  subscription Subscription?

  @@index([clerkOrgId])
  @@index([businessId])
}

model Membership {
  id           String   @id @default(cuid())
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  membershipId String   @unique

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
}

model Inventory {
  id                  String          @id @default(cuid())
  type                InventoryType
  name                String
  description         String?
  dimensions          String
  capacity            Int
  price               Float
  setupTime           Int
  teardownTime        Int
  images              String[]
  primaryImage        String?
  status              InventoryStatus
  minimumSpace        String
  weightLimit         Int
  ageRange            String
  weatherRestrictions String[]
  quantity            Int             @default(1)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  bookingItems BookingItem[]

  @@index([businessId])
}

model Customer {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  notes        String?
  bookingCount Int       @default(0)
  totalSpent   Float     @default(0)
  lastBooking  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())

  isLead Boolean @default(false)
  status String  @default("Active")
  type   String  @default("Regular")

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  bookings Booking[]
  waivers  Waiver[]

  @@unique([email, businessId])
  @@index([businessId])
  @@index([email])
  @@index([phone])
}

model Booking {
  id                  String        @id @default(cuid())
  eventDate           DateTime      @db.Date
  startTime           DateTime      @db.Timestamp(3)
  endTime             DateTime      @db.Timestamp(3)
  status              BookingStatus @default(PENDING)
  totalAmount         Float
  depositAmount       Float?
  depositPaid         Boolean       @default(false)
  eventType           String?
  eventAddress        String
  eventCity           String
  eventState          String
  eventZipCode        String
  eventTimeZone       String        @default("America/Chicago")
  participantAge      Int?
  participantCount    Int
  subtotalAmount      Float         @default(0)
  taxAmount           Float         @default(0)
  taxRate             Float         @default(0)
  isCompleted         Boolean       @default(false)
  isCancelled         Boolean       @default(false)
  specialInstructions String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String

  inventoryItems BookingItem[]
  payments       Payment[]
  waivers        Waiver[]

  @@index([businessId])
  @@index([customerId])
  @@index([eventDate])
  @@index([startTime, endTime])
}

model BookingItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  booking     Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String

  @@index([bookingId])
  @@index([inventoryId])
}

model Payment {
  id                 String        @id @default(cuid())
  amount             Decimal       @db.Decimal(10, 2)
  type               PaymentType
  status             PaymentStatus
  currency           String        @default("USD")
  metadata           Json?
  stripeClientSecret String?
  stripePaymentId    String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())

  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  String
  business   Business @relation(fields: [businessId], references: [id])
  businessId String
}

model Coupon {
  id             String       @id @default(cuid())
  code           String
  description    String?
  discountType   DiscountType
  discountAmount Float
  maxUses        Int?
  usedCount      Int          @default(0)
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean      @default(true)
  minimumAmount  Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  @@unique([code, businessId])
  @@index([businessId])
}

model SalesFunnel {
  id              String   @id @default(cuid())
  name            String
  isActive        Boolean  @default(true)
  popupTitle      String
  popupText       String
  popupImage      String?
  formTitle       String
  thankYouMessage String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String

  @@index([businessId])
}

model Waiver {
  id                 String       @id @default(cuid())
  status             WaiverStatus @default(PENDING)
  templateVersion    String
  documentUrl        String
  docuSealDocumentId String       @unique
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())

  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId  String

  @@index([businessId])
  @@index([customerId])
  @@index([bookingId])
  @@index([status])
}

model Subscription {
  id                   String       @id @default(cuid())
  stripeCustomerId     String       @unique
  stripeSubscriptionId String       @unique
  status               String
  priceId              String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId       String       @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([organizationId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

// Enums

enum InventoryType {
  BOUNCE_HOUSE
  INFLATABLE
  GAME
  OTHER
}

enum InventoryStatus {
  AVAILABLE
  BOOKED
  MAINTENANCE
  RETIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  WEATHER_HOLD
}

enum PaymentType {
  DEPOSIT
  FULL_PAYMENT
  REFUND
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum WaiverStatus {
  PENDING
  SIGNED
  REJECTED
  EXPIRED
}
